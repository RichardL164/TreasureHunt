Index: src/Town.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * The Town Class is where it all happens.\r\n * The Town is designed to manage all the things a Hunter can do in town.\r\n * This code has been adapted from Ivan Turner's original program -- thank you Mr. Turner!\r\n */\r\n\r\npublic class Town {\r\n    // instance variables\r\n    private Hunter hunter;\r\n    private Shop shop;\r\n    private Terrain terrain;\r\n    private String printMessage;\r\n    private boolean toughTown;\r\n    private boolean dug;\r\n\r\n    private boolean isSearched;\r\n\r\n\r\n    /**\r\n     * The Town Constructor takes in a shop and the surrounding terrain, but leaves the hunter as null until one arrives.\r\n     *\r\n     * @param shop The town's shoppe.\r\n     * @param toughness The surrounding terrain.\r\n     */\r\n    public Town(Shop shop, double toughness) {\r\n        this.shop = shop;\r\n        this.terrain = getNewTerrain();\r\n\r\n        // the hunter gets set using the hunterArrives method, which\r\n        // gets called from a client class\r\n        hunter = null;\r\n\r\n        printMessage = \"\";\r\n\r\n        // higher toughness = more likely to be a tough town\r\n        toughTown = (Math.random() < toughness);\r\n        dug = false;\r\n    }\r\n\r\n    public String getLatestNews() {\r\n        return printMessage;\r\n    }\r\n\r\n    /**\r\n     * Assigns an object to the Hunter in town.\r\n     *\r\n     * @param hunter The arriving Hunter.\r\n     */\r\n    public void hunterArrives(Hunter hunter) {\r\n        this.hunter = hunter;\r\n        printMessage = \"Welcome to town, \" + hunter.getHunterName() + \".\";\r\n        isSearched = false;\r\n\r\n        if (toughTown) {\r\n            printMessage += \"\\nIt's pretty rough around here, so watch yourself.\";\r\n        } else {\r\n            printMessage += \"\\nWe're just a sleepy little town with mild mannered folk.\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the action of the Hunter leaving the town.\r\n     *\r\n     * @return true if the Hunter was able to leave town.\r\n     */\r\n    public boolean leaveTown() {\r\n        boolean canLeaveTown = terrain.canCrossTerrain(hunter);\r\n        if (canLeaveTown) {\r\n            String item = terrain.getNeededItem();\r\n            printMessage = \"You used your \" + item + \" to cross the \" + terrain.getTerrainName() + \".\";\r\n            if (checkItemBreak()) {\r\n                hunter.removeItemFromKit(item);\r\n                printMessage += \"\\nUnfortunately, you lost your \" + item;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        printMessage = \"You can't leave town, \" + hunter.getHunterName() + \". You don't have a \" + terrain.getNeededItem() + \".\";\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Handles calling the enter method on shop whenever the user wants to access the shop.\r\n     *\r\n     * @param choice If the user wants to buy or sell items at the shop.\r\n     */\r\n    public void enterShop(String choice) {\r\n        shop.enter(hunter, choice);\r\n        printMessage = \"You left the shop\";\r\n    }\r\n    public void enterShopDig(String choice) {\r\n        shop.digGold();\r\n        printMessage = \"You\"\r\n    }\r\n\r\n    /**\r\n     * Gives the hunter a chance to fight for some gold.<p>\r\n     * The chances of finding a fight and winning the gold are based on the toughness of the town.<p>\r\n     * The tougher the town, the easier it is to find a fight, and the harder it is to win one.\r\n     */\r\n    public void lookForTrouble() {\r\n        double noTroubleChance;\r\n//        if (TreasureHunter.secretMode) {\r\n//            System.out.println(\"the brawler, seeing your sword, realizes he picked a losing fight and gives you his gold\");\r\n//            hunter.changeGold();\r\n//        }\r\n        if (toughTown) {\r\n            noTroubleChance = 0.66;\r\n        } else {\r\n            noTroubleChance = 0.33;\r\n        }\r\n\r\n        if (Math.random() > noTroubleChance) {\r\n            printMessage = \"You couldn't find any trouble\";\r\n        } else {\r\n            printMessage = Colors.RED + \"You want trouble, stranger!  You got it!\\nOof! Umph! Ow!\\n\" + Colors.RESET;\r\n            int goldDiff = (int) (Math.random() * 10) + 1;\r\n            if (Math.random() > noTroubleChance) {\r\n                printMessage += Colors.RED + \"Okay, stranger! You proved yer mettle. Here, take my gold.\" + Colors.RESET;\r\n                printMessage += Colors.RED + \"\\nYou won the brawl and receive \" + Colors.RESET + Colors.YELLOW + goldDiff + \" gold.\" + Colors.RESET;\r\n                hunter.changeGold(goldDiff);\r\n            } else {\r\n                printMessage += Colors.RED + \"That'll teach you to go lookin' fer trouble in MY town! Now pay up!\" + Colors.RESET;\r\n                printMessage += Colors.RED + \"\\nYou lost the brawl and pay \" + Colors.YELLOW + goldDiff + \" gold.\" + Colors.RESET;\r\n                hunter.changeGold(-goldDiff);\r\n            }\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return \"This nice little town is surrounded by \" + Colors.CYAN + terrain.getTerrainName() + Colors.RESET + \".\";\r\n    }\r\n\r\n    /**\r\n     * Determines the surrounding terrain for a town, and the item needed in order to cross that terrain.\r\n     *\r\n     * @return A Terrain object.\r\n     */\r\n    private Terrain getNewTerrain() {\r\n        double rnd = Math.random();\r\n        if (rnd < .17) {\r\n            return new Terrain(\"Mountains\", \"Rope\");\r\n        } else if (rnd < .34) {\r\n            return new Terrain(\"Ocean\", \"Boat\");\r\n        } else if (rnd < .51) {\r\n            return new Terrain(\"Plains\", \"Horse\");\r\n        } else if (rnd < .68) {\r\n            return new Terrain(\"Desert\", \"Water\");\r\n        } else if (rnd < .85) {\r\n            return new Terrain(\"Jungle\", \"Machete\");\r\n        } else {\r\n            return new Terrain(\"Marsh\", \"Boots\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether a used item has broken.\r\n     *\r\n     * @return true if the item broke.\r\n     */\r\n    private boolean checkItemBreak() {\r\n        double rand = Math.random();\r\n        return (rand < 0.5);\r\n    }\r\n\r\n    public String huntForTreasure() {\r\n        if (isSearched) {\r\n            return \"you have already searched this town\";\r\n        }\r\n        isSearched = true;\r\n        int treasure = (int) (Math.random() * 3) + 1;\r\n        if (treasure == 1) {\r\n            if (hunter.checkTreasure(\"crown\")) {\r\n                return \"You found an crown\";\r\n            }\r\n        }\r\n        if (treasure == 2) {\r\n            if (hunter.checkTreasure(\"gem\")) {\r\n                return \"You found an gem\";\r\n            }\r\n        }\r\n        if (treasure == 3) {\r\n            if (hunter.checkTreasure(\"trophy\")) {\r\n                return \"You found an trophy\";\r\n            }\r\n\r\n        }\r\n        return \"You found dust\";\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Town.java b/src/Town.java
--- a/src/Town.java	(revision c4439da2045a567bb3027c0c7ef985ed3343682a)
+++ b/src/Town.java	(date 1703267720509)
@@ -91,7 +91,7 @@
     }
     public void enterShopDig(String choice) {
         shop.digGold();
-        printMessage = "You"
+        printMessage = "You";
     }
 
     /**
@@ -174,17 +174,19 @@
             if (hunter.checkTreasure("crown")) {
                 return "You found an crown";
             }
+            return "You already found this.";
         }
         if (treasure == 2) {
             if (hunter.checkTreasure("gem")) {
                 return "You found an gem";
             }
+            return "You already found this.";
         }
         if (treasure == 3) {
             if (hunter.checkTreasure("trophy")) {
                 return "You found an trophy";
             }
-
+            return "You already found this.";
         }
         return "You found dust";
     }
Index: src/TreasureHunter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Scanner;\r\n\r\n/**\r\n * This class is responsible for controlling the Treasure Hunter game.<p>\r\n * It handles the display of the menu and the processing of the player's choices.<p>\r\n * It handles all the display based on the messages it receives from the Town object. <p>\r\n *\r\n * This code has been adapted from Ivan Turner's original program -- thank you Mr. Turner!\r\n */\r\n\r\npublic class TreasureHunter {\r\n    // static variables\r\n    private static final Scanner SCANNER = new Scanner(System.in);\r\n\r\n    // instance variables\r\n    private Town currentTown;\r\n    private Hunter hunter;\r\n    private boolean hardMode;\r\n    public static boolean secretMode;\r\n\r\n\r\n    /**\r\n     * Constructs the Treasure Hunter game.\r\n     */\r\n    public TreasureHunter() {\r\n        // these will be initialized in the play method\r\n        currentTown = null;\r\n        hunter = null;\r\n        hardMode = false;\r\n        secretMode = false;\r\n    }\r\n\r\n    /**\r\n     * Starts the game; this is the only public method\r\n     */\r\n    public void play() {\r\n        welcomePlayer();\r\n        enterTown();\r\n        showMenu();\r\n    }\r\n\r\n    /**\r\n     * Creates a hunter object at the beginning of the game and populates the class member variable with it.\r\n     */\r\n    private void welcomePlayer() {\r\n        System.out.println(\"Welcome to TREASURE HUNTER!\");\r\n        System.out.println(\"Going hunting for the big treasure, eh?\");\r\n        System.out.print(\"What's your name, Hunter? \");\r\n        String name = SCANNER.nextLine().toLowerCase();\r\n\r\n        // set hunter instance variable\r\n        hunter = new Hunter(name, 10);\r\n\r\n        System.out.print(\"Hard mode? (y/n): \");\r\n        String hard = SCANNER.nextLine().toLowerCase();\r\n        if (hard.equals(\"y\")) {\r\n            hardMode = true;\r\n        } else if (hard.equals(\"test\")) {\r\n            hunter.changeGold(167);\r\n            hunter.buyItem(\"water\", 2);\r\n            hunter.buyItem(\"rope\", 4);\r\n            hunter.buyItem(\"machete\", 6);\r\n            hunter.buyItem(\"shovel\", 8);\r\n            hunter.buyItem(\"horse\", 12);\r\n            hunter.buyItem(\"boat\", 20);\r\n            hunter.buyItem(\"boots\", 25);\r\n        } else if (hard.equals(\"s\")) {\r\n            secretMode = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new town and adds the Hunter to it.\r\n     */\r\n    private void enterTown() {\r\n        double markdown = 0.5;\r\n        double toughness = 0.4;\r\n        if (hardMode) {\r\n            // in hard mode, you get less money back when you sell items\r\n            markdown = 0.25;\r\n\r\n            // and the town is \"tougher\"\r\n            toughness = 0.75;\r\n        }\r\n\r\n        // note that we don't need to access the Shop object\r\n        // outside of this method, so it isn't necessary to store it as an instance\r\n        // variable; we can leave it as a local variable\r\n        Shop shop = new Shop(markdown);\r\n\r\n        // creating the new Town -- which we need to store as an instance\r\n        // variable in this class, since we need to access the Town\r\n        // object in other methods of this class\r\n        currentTown = new Town(shop, toughness);\r\n\r\n        // calling the hunterArrives method, which takes the Hunter\r\n        // as a parameter; note this also could have been done in the\r\n        // constructor for Town, but this illustrates another way to associate\r\n        // an object with an object of a different class\r\n        currentTown.hunterArrives(hunter);\r\n    }\r\n\r\n    /**\r\n     * Displays the menu and receives the choice from the user.<p>\r\n     * The choice is sent to the processChoice() method for parsing.<p>\r\n     * This method will loop until the user chooses to exit.\r\n     */\r\n    private void showMenu() {\r\n        String choice = \"\";\r\n\r\n        while (!choice.equals(\"x\")) {\r\n            if (hunter.getGold() <= 0) {\r\n                System.out.println(\"Game over\");\r\n                choice = \"x\";\r\n            } else {\r\n                System.out.println();\r\n                System.out.println(currentTown.getLatestNews());\r\n                System.out.println(\"***\");\r\n                System.out.println(hunter);\r\n                System.out.println(hunter.getTreasure());\r\n                System.out.println(currentTown);\r\n                System.out.println(\"(B)uy something at the shop.\");\r\n                System.out.println(\"(S)ell something at the shop.\");\r\n                System.out.println(\"(M)ove on to a different town.\");\r\n                System.out.println(\"(L)ook for trouble!\");\r\n                System.out.println(\"(D)ig for gold!\");\r\n                System.out.println(\"(H)unt for treasure!\");\r\n                System.out.println(\"Give up the hunt and e(X)it.\");\r\n                System.out.println();\r\n                System.out.print(\"What's your next move? \");\r\n                choice = SCANNER.nextLine().toLowerCase();\r\n                processChoice(choice);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Takes the choice received from the menu and calls the appropriate method to carry out the instructions.\r\n     * @param choice The action to process.\r\n     */\r\n    private void processChoice(String choice) {\r\n        if (choice.equals(\"b\") || choice.equals(\"s\")) {\r\n            currentTown.enterShop(choice);\r\n        } else if (choice.equals(\"m\")) {\r\n            if (currentTown.leaveTown()) {\r\n                // This town is going away so print its news ahead of time.\r\n                System.out.println(currentTown.getLatestNews());\r\n                enterTown();\r\n            }\r\n        } else if (choice.equals(\"l\")) {\r\n            currentTown.lookForTrouble();\r\n        } else if (choice.equals(\"d\")) {\r\n            currentTown.digGold();\r\n        }\r\n        else if (choice.equals(\"x\")) {\r\n            System.out.println(\"Fare thee well, \" + hunter.getHunterName() + \"!\");\r\n        } else if (choice.equals((\"h\"))) {\r\n            System.out.println(currentTown.huntForTreasure());\r\n        } else {\r\n            System.out.println(\"Yikes! That's an invalid option! Try again.\");\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/TreasureHunter.java b/src/TreasureHunter.java
--- a/src/TreasureHunter.java	(revision c4439da2045a567bb3027c0c7ef985ed3343682a)
+++ b/src/TreasureHunter.java	(date 1703267720519)
@@ -150,7 +150,7 @@
         } else if (choice.equals("l")) {
             currentTown.lookForTrouble();
         } else if (choice.equals("d")) {
-            currentTown.digGold();
+
         }
         else if (choice.equals("x")) {
             System.out.println("Fare thee well, " + hunter.getHunterName() + "!");
Index: src/Hunter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * Hunter Class<br /><br />\r\n * This class represents the treasure hunter character (the player) in the Treasure Hunt game.\r\n * This code has been adapted from Ivan Turner's original program -- thank you Mr. Turner!\r\n */\r\n\r\npublic class Hunter {\r\n    //instance variables\r\n    private String hunterName;\r\n    private String[] kit;\r\n    private String[] treasure;\r\n    private int gold;\r\n\r\n    /**\r\n     * The base constructor of a Hunter assigns the name to the hunter and an empty kit.\r\n     *\r\n     * @param hunterName The hunter's name.\r\n     * @param startingGold The gold the hunter starts with.\r\n     */\r\n    public Hunter(String hunterName, int startingGold) {\r\n        this.hunterName = hunterName;\r\n        kit = new String[7]; // only 5 possible items can be stored in kit\r\n        gold = startingGold;\r\n        treasure = new String[3];\r\n        treasure[1] = \" \";\r\n        treasure[2] = \" \";\r\n        treasure[0] = \" \";\r\n    }\r\n\r\n    //Accessors\r\n    public String getHunterName() {\r\n        return hunterName;\r\n    }\r\n\r\n    public boolean checkTreasure(String treasureFound) {\r\n        int i = 0;\r\n        for (String treasure : treasure) {\r\n            if (!treasure.equals(treasureFound)) {\r\n                this.treasure[i] = treasureFound;\r\n                return true;\r\n            }\r\n            i++;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public String getTreasure() {\r\n        String allTreasures = \"\";\r\n        for (String treasure: treasure) {\r\n            allTreasures += treasure + \" \";\r\n        }\r\n        return allTreasures;\r\n    }\r\n\r\n    /**\r\n     * Updates the amount of gold the hunter has.\r\n     *\r\n     * @param modifier Amount to modify gold by.\r\n     */\r\n    public void changeGold(int modifier) {\r\n        gold += modifier;\r\n        if (gold < 0) {\r\n            gold = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current amount of gold.\r\n     *\r\n     * @return the amount of gold the hunter has.\r\n     */\r\n    public int getGold() {\r\n        return gold;\r\n    }\r\n\r\n    /**\r\n     * Buys an item from a shop.\r\n     *\r\n     * @param item The item the hunter is buying.\r\n     * @param costOfItem The cost of the item.\r\n     * @return true if the item is successfully bought.\r\n     */\r\n    public boolean buyItem(String item, int costOfItem) {\r\n        if (costOfItem == 0 || gold < costOfItem || hasItemInKit(item)) {\r\n            return false;\r\n        }\r\n\r\n        gold -= costOfItem;\r\n        addItem(item);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * The Hunter is selling an item to a shop for gold.<p>\r\n     * This method checks to make sure that the seller has the item and that the seller is getting more than 0 gold.\r\n     *\r\n     * @param item The item being sold.\r\n     * @param buyBackPrice the amount of gold earned from selling the item\r\n     * @return true if the item was successfully sold.\r\n     */\r\n    public boolean sellItem(String item, int buyBackPrice) {\r\n        if (buyBackPrice <= 0 || !hasItemInKit(item)) {\r\n            return false;\r\n        }\r\n\r\n        gold += buyBackPrice;\r\n        removeItemFromKit(item);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes an item from the kit by setting the index of the item to null.\r\n     *\r\n     * @param item The item to be removed.\r\n     */\r\n    public void removeItemFromKit(String item) {\r\n        int itmIdx = findItemInKit(item);\r\n\r\n        // if item is found\r\n        if (itmIdx >= 0) {\r\n            kit[itmIdx] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to make sure that the item is not already in the kit.\r\n     * If not, it assigns the item to an index in the kit with a null value (\"empty\" position).\r\n     *\r\n     * @param item The item to be added to the kit.\r\n     * @return true if the item is not in the kit and has been added.\r\n     */\r\n    private boolean addItem(String item) {\r\n        if (!hasItemInKit(item)) {\r\n            int idx = emptyPositionInKit();\r\n            kit[idx] = item;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the kit Array has the specified item.\r\n     *\r\n     * @param item The search item\r\n     * @return true if the item is found.\r\n     */\r\n    public boolean hasItemInKit(String item) {\r\n        for (String tmpItem : kit) {\r\n            if (item.equals(tmpItem)) {\r\n                // early return\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a printable representation of the inventory, which\r\n     * is a list of the items in kit, with a space between each item.\r\n     *\r\n     * @return The printable String representation of the inventory.\r\n     */\r\n    public String getInventory() {\r\n        String printableKit = \"\";\r\n        String space = \" \";\r\n\r\n        for (String item : kit) {\r\n            if (item != null) {\r\n                printableKit += item + space;\r\n            }\r\n        }\r\n\r\n        return printableKit;\r\n    }\r\n\r\n    /**\r\n     * @return A string representation of the hunter.\r\n     */\r\n    public String toString() {\r\n        String str = hunterName + \" has \" + Colors.YELLOW + gold + \" gold\" + Colors.RESET;\r\n        if (!kitIsEmpty()) {\r\n            str += \" and \" + Colors.PURPLE + getInventory() + Colors.RESET;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Searches kit Array for the index of the specified value.\r\n     *\r\n     * @param item String to look for.\r\n     * @return The index of the item, or -1 if not found.\r\n     */\r\n    private int findItemInKit(String item) {\r\n        for (int i = 0; i < kit.length; i++) {\r\n            String tmpItem = kit[i];\r\n\r\n            if (item.equals(tmpItem)) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Check if the kit is empty - meaning all elements are null.\r\n     *\r\n     * @return true if kit is completely empty.\r\n     */\r\n    private boolean kitIsEmpty() {\r\n        for (String string : kit) {\r\n            if (string != null) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Finds the first index where there is a null value.\r\n     *\r\n     * @return index of empty index, or -1 if not found.\r\n     */\r\n    private int emptyPositionInKit() {\r\n        for (int i = 0; i < kit.length; i++) {\r\n            if (kit[i] == null) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Hunter.java b/src/Hunter.java
--- a/src/Hunter.java	(revision c4439da2045a567bb3027c0c7ef985ed3343682a)
+++ b/src/Hunter.java	(date 1703267681602)
@@ -34,6 +34,15 @@
 
     public boolean checkTreasure(String treasureFound) {
         int i = 0;
+        if (treasure[0].equals(treasureFound)) {
+            return false;
+        }
+        if (treasure[1].equals(treasureFound)) {
+            return false;
+        }
+        if (treasure[2].equals(treasureFound)) {
+            return false;
+        }
         for (String treasure : treasure) {
             if (!treasure.equals(treasureFound)) {
                 this.treasure[i] = treasureFound;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"fe04c8e2-fa27-4932-8840-f3588ac670dc\" name=\"Changes\" comment=\"Fixed push bug, TH 1, 2, 3, 4, 6, 7, 9 are done\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/Shop.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Shop.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Town.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Town.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/TreasureHunter.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/TreasureHunter.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Zj5z4Ifr9iuMHLy3YZzdoIAOqi\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"fe04c8e2-fa27-4932-8840-f3588ac670dc\" name=\"Changes\" comment=\"\" />\r\n      <created>1702922906589</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702922906589</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Done with TH 3\">\r\n      <created>1703009933397</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703009933397</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Done with TH 7 &#10;Done with TH 9\">\r\n      <created>1703096042875</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703096042875</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Fixed push bug, TH 1, 2, 3, 4, 6, 7, 9 are done\">\r\n      <created>1703181864382</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703181864382</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Done with TH 3\" />\r\n    <MESSAGE value=\"Done with TH 7 &#10;Done with TH 9\" />\r\n    <MESSAGE value=\"Fixed push bug, TH 1, 2, 3, 4, 6, 7, 9 are done\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed push bug, TH 1, 2, 3, 4, 6, 7, 9 are done\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c4439da2045a567bb3027c0c7ef985ed3343682a)
+++ b/.idea/workspace.xml	(date 1703267682038)
@@ -5,9 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="fe04c8e2-fa27-4932-8840-f3588ac670dc" name="Changes" comment="Fixed push bug, TH 1, 2, 3, 4, 6, 7, 9 are done">
-      <change beforePath="$PROJECT_DIR$/src/Shop.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Shop.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Hunter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Hunter.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Town.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Town.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/TreasureHunter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/TreasureHunter.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
